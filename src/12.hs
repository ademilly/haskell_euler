-- The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
-- 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
-- Let us list the factors of the first seven triangle numbers:
--  1: 1
--  3: 1,3
--  6: 1,2,3,6
-- 10: 1,2,5,10
-- 15: 1,3,5,15
-- 21: 1,3,7,21
-- 28: 1,2,4,7,14,28
-- We can see that 28 is the first triangle number to have over five divisors.
-- What is the value of the first triangle number to have over five hundred divisors?

import Data.List (find, sort, subsequences)
import qualified Data.Set as Set

nubOrd :: Ord a => [a] -> [a] 
nubOrd ns = go Set.empty ns 
  where
  go s (x:xs)
   | x `Set.member` s = go s xs
   | otherwise        = x : go (Set.insert x s) xs
  go _ _              = []

primes = sieve [2..]
sieve (p : ps) = p : [n | n <- ps, n `rem` p /= 0]

triangles = 1 : 3 : [a + b | (a, b) <- zip [3..] (tail triangles)]

div a b = (a `quot` b, a `rem` b)
comb k n 
  | k == 0     = 1
  | k == n     = 1
  | k == 1     = n
  | k == n - 1 = n
  | otherwise  = quot (factorial n) (factorial k * factorial (n - k))
factorial n = product [1..n]
numberOfComb n = go 0 n
  where
  go k m
    | k > m     = 0
    | otherwise = comb k m + go (k + 1) m 

primeDivisorsOf n = go primes n
  where
  go (p : ps) m 
    | m < 2         = []
    | m `rem` p == 0 = p : go primes (m `quot` p)
    | otherwise      = go ps m 

uniq [] = []
uniq (x : []) = x : []
uniq (x : xs)
  | x `elem` xs = uniq xs
  | otherwise   = x : uniq xs

extract Nothing = []
extract (Just a) = a

main = print $ last . extract $ find (\xs -> length xs > 500) $ map (map product . (uniq . subsequences . primeDivisorsOf)) triangles
