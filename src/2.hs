-- Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
--
-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
--
-- By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

apply :: (a -> a) -> Int -> a -> a
apply _ 0 x = x
apply f n x = apply f (n - 1) (f x)

getLast :: [Int] -> Int
getLast [] = 0
getLast x  = head (reverse x)

removeLast :: [a] -> [a]
removeLast x = reverse (tail (reverse x))

addNextFib :: [Int] -> [Int]
addNextFib []   = [1]
addNextFib [1]  = [1, 2]
addNextFib fibs = fibs ++ [getLast fibs + getLast (apply removeLast 1 fibs)]

getFibsUpTo :: Int -> [Int] -> [Int]
getFibsUpTo max fibs
  | getLast fibs > max = removeLast fibs
  | otherwise          = getFibsUpTo max (addNextFib fibs)

main = print (foldl (+) 0 (filter even (getFibsUpTo 4000000 [])))
